// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  password  String
}

model Customer {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  firstName         String
  lastName          String
  street            String
  streetNumber      String
  zipCode           String
  city              String
  email             String
  firstPhoneNumber  String
  secondPhoneNumber String?
  optionalMessage   String?
  agreementAGB      Boolean
  children          Child[]
  booking           Booking?
}

model Child {
  id                     String   @id @default(uuid())
  customerId             String
  firstChild             Boolean
  firstName              String
  lastName               String
  birthday               DateTime
  gender                 String
  allowanceToGoHomeAlone Boolean
  allergies              String?
  customer               Customer @relation(fields: [customerId], references: [id])
}

model Booking {
  id         String   @id @default(uuid())
  customerId String   @unique
  createdAt  DateTime @default(now())
  weeks      Week[]
  customer   Customer @relation(fields: [customerId], references: [id])
  payment    Payment?
}

model Week {
  id        Int      @id @default(autoincrement())
  bookingId String
  name      String
  maxDays   Int
  days      Day[]
  booking   Booking? @relation(fields: [bookingId], references: [id])
}

model Day {
  id     Int    @id @default(autoincrement())
  weekId Int
  name   String
  week   Week   @relation(fields: [weekId], references: [id])
}

model Tokens {
  id           Int      @id @default(autoincrement())
  paymentId    String   @unique
  customToken  String   @unique
  paymentToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  payment      Payment? @relation(fields: [paymentId], references: [id])
}

enum TransactionStatus {
  AUTHORIZED
  CAPTURED
  CANCELED
}

model Payment {
  id                      String             @id @default(uuid())
  bookingId               String             @unique
  price                   Float
  currency                String             @default("CHF")
  transactionStatus       TransactionStatus?
  transactionType         String?
  transactionId           String?
  transactionDate         DateTime?
  acquirerName            String?
  acquirerReference       String?
  sixTransactionReference String?
  approvalCode            String?
  liabilityShift          Boolean?
  liableEntity            String?
  captureId               String?
  captureDate             DateTime?
  tokens                  Tokens?
  booking                 Booking            @relation(fields: [bookingId], references: [id])
}
